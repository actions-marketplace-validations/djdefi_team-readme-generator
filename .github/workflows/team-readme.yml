# This is a basic workflow to help you get started with Actions

name: Team README

# Controls when the workflow will run
on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  push:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.MY_PAT }}
          result-encoding: string
          script: |
            // Get the list of members on the team
            const members = await github.rest.teams.listMembersInOrg({
              org: "NevadaCountyFreeCodeCamp",
              team_slug: "Campers"
            });
            // Log the list of members to the console
            console.log("Members output:");
            console.log(members);
            console.log(members.data);
            // For each member returned, use the user api to get their login, avatar, location, and bio
            const memberData = await Promise.all(members.data.map(async (member) => {
              const user = await github.rest.users.getByUsername({
                username: member.login
              });
              // Log the user data to the console
              console.log("User output:");
              console.log(user);
              console.log(user.data);
              return user.data;
            }));
            // Log the member data to the console
            console.log("MemberData output:");
            console.log(memberData);
            // Create a markdown table with the member data
            const table = memberData.map((member) => {
              return `| <img src="${member.avatar_url}" width="30" /> | @${member.login} | ${member.location} | ${member.bio} |`;
            }).join("\n");
            // Log the table to the console
            console.log("Table output:");
            console.log(table);
            // Add headers to the table
            const tableWithHeaders = `| ðŸ‘¤ | Username | Location | Bio |\n| --- | --- | --- | --- |\n${table}`;
            // Log the table with headers to the console
            console.log("Table with headers output:");
            console.log(tableWithHeaders);

            // Get the README file of the current repo context and its contents
            // Add the table to the README following the "<!--auto-team-table-->" comment
            const readme = await github.rest.repos.getReadme({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref
            });
            const readmeContents = Buffer.from(readme.data.content, "base64").toString();
            const readmeWithTable = readmeContents.replace(/<!--auto-team-table-->/, `<!--auto-team-table-->\n${tableWithHeaders}`);

            // Create a new branch for the README update and commit the updated README
            const branch = await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/heads/update-team-readme",
              sha: context.sha
            });
            const commit = await github.rest.git.createCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              message: "Update team README",
              tree: readme.data.sha,
              parents: [context.sha]
            });
            // Push the commit to the new branch
            await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "heads/update-team-readme",
              sha: commit.data.sha
            });
            // Create a pull request for the new branch
            const pullRequest = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "Update team README",
              head: "update-team-readme",
              base: "main"
            });
            // Log the pull request to the console
            console.log("Pull request output:");
            console.log(pullRequest);

            // Return the pull request number
            return pullRequest.data.number;



