# This is a basic workflow to help you get started with Actions

name: Team README

# Controls when the workflow will run
on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  push:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.MY_PAT }}
          result-encoding: string
          script: |
            // Get the list of members on the team
            const members = await github.rest.teams.listMembersInOrg({
              org: "NevadaCountyFreeCodeCamp",
              team_slug: "Campers"
            });
            // Log the list of members to the console
            console.log("Members output:");
            console.log(members);
            console.log(members.data);
            // For each member returned, use the user api to get their login, avatar, location, and bio
            const memberData = await Promise.all(members.data.map(async (member) => {
              const user = await github.rest.users.getByUsername({
                username: member.login
              });
              // Log the user data to the console
              console.log("User output:");
              console.log(user);
              console.log(user.data);
              return user.data;
            }));
            // Log the member data to the console
            console.log("MemberData output:");
            console.log(memberData);
            // Create a markdown table with the member data
            const table = memberData.map((member) => {
              return `| <img src="${member.avatar_url}" width="30" /> | @${member.login} | ${member.location} | ${member.bio} |`;
            }).join("\n");
            // Log the table to the console
            console.log("Table output:");
            console.log(table);
            // Add headers to the table
            const tableWithHeaders = `| ðŸ‘¤ | Username | Location | Bio |\n| --- | --- | --- | --- |\n${table}`;
            // Log the table with headers to the console
            console.log("Table with headers output:");
            console.log(tableWithHeaders);

            // Get the README file of the current repo context and its contents
            // Add the table to the README following the "<!--auto-team-table-->" comment
            const readme = await github.rest.repos.getReadme({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref
            });
            const readmeContents = Buffer.from(readme.data.content, "base64").toString();
            const readmeWithTable = readmeContents.replace(/<!--auto-team-table-->/, `<!--auto-team-table-->\n${tableWithHeaders}`);
            // Log the README with table to the console
            console.log("README with table output:");
            console.log(readmeWithTable);

            // Create a new branch new branch with a unique name based on the first 7 characters of the commit SHA for the README update and commit the updated README
            const branch = await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/heads/update-team-readme-" + context.sha.substring(0, 7),
              sha: context.sha
            });
            // Log the branch to the console
            console.log("Branch output:");
            console.log(branch);

            // Create a blob with the updated README
            const blob = await github.rest.git.createBlob({
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: readmeWithTable,
              encoding: "utf-8"
            });
            // Log the blob to the console
            console.log("Blob output:");
            console.log(blob);

            // Create a tree with the updated README
            const tree = await github.rest.git.createTree({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tree: [
                {
                  path: "README.md",
                  mode: "100644",
                  type: "blob",
                  sha: blob.data.sha
                }
              ],
              base_tree: context.sha
            });

            // Log the tree to the console 
            console.log("Tree output:");
            console.log(tree);

            // Create a commit with the updated README
            const commit = await github.rest.git.createCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              message: "Update team README",
              tree: tree.data.sha,
              parents: [context.sha]
            });

            // Log the commit to the console
            console.log("Commit output:");
            console.log(commit);

            // Push the commit to the new branch with a unique name based on the first 7 characters of the commit SHA
            const push = await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/update-team-readme-${commit.data.sha.slice(0, 7)}`,
              sha: commit.data.sha
            });

            // Log the push to the console
            console.log("Push output:");
            console.log(push);

            // Create a pull request with the new branch
            const pullRequest = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "Update team README",
              head: "update-team-readme-" + commit.data.sha.slice(0, 7),
              base: "main"
            });

            // Log the pull request to the console
            console.log("Pull request output:");
            console.log(pullRequest);

            // Return the pull request number
            return pullRequest.data.number;





